 
Data Science & Analytics Project Definition:

Updated: 2024.04.19

Project Name: Investment_Portfolio_App

Project and Work Product Description: 

   Capturing and maintaining Buy/Sell Stock investments (your portfolio) for the beginner.
   Keep all your Buy/Sell transactions in one manageable place.
   Pull desired/chosen Ticker symbols from yfiance RestAPI. 
   Calculate the cost basis, realized gains, and current value of each ticker in the excel file.
   Display the realized gains, unrealized gains, and cost basis of each ticker.  
     
High-level workflow Diagram:
      AS-IS <<Investment_Portfolio_App.drawio>> open at https://app.diagrams.net/?src=about#
      TO-BE <<Investment_Portfolio_App_v1.drawio>> open at https://app.diagrams.net/?src=about#

Description of Solution: 
	
     - Convert Jupyter Notebook code and markdown cells into a reusable Python program that performs Stock Portfolio (Buy/Sell) transactions.
     - Use real-time data feeds to obtain current data sets using RestAPI (yfinance).
     - Integrate the 2nd repo using streamlit framework to display and analyze the captured data sets.

     Additional requirements:
        - Enter buy/sell transaction in the "Transactions" sheet ensuring the stock ticker symbol is correct.
             note: Transaction total must be left blank (program will calculate this).
      
     
 Using two repo sources: 
    https://github.com/kdboller/pythonsp500  and  https://streamlit.io/gallery?category=finance-business  
    
    Refactor these repos to extend there current functionality as follows:
    v1:
       - Convert Jupyter Notebook code and markdown cells into a reusable Python program that performs Stock Portfolio (Buy/Sell) transactions.
       - Cse real-time data feeds to obtain current data sets using RestAPI (yfinance).
       - Integrate the 2nd repo using streamlit framework to view the captured data sets.
 
    v2:
       - Integrate a SQLite database to store the data in one or more tables. 
       - Query data from SQLite db and export data into either a comma delimited or excel file format.
       - Produce plotly or matplotlib graphics for certain data sets.
       
              
Solution Design (high-level):

   Phase 1:
    - Added code to pull current data from yfinance API
    - Properly utilize FIFO accounting and calculate cost basis, realized gains, and current value of each ticker in the excel file.
    - Changed xlsx sheet to separate each transaction.
    - Convert Jupyter Notebook code and markdown cells into a reusable Python program that performs Stock Portfolio (Buy/Sell) transactions.
    - test and debug minor issues.
  
   Phase 2:
     - Integrate the 2nd repo using streamlit framework to view the captured data sets.
     - Modified python code to accommodate the new requirements for personal trading data to be rendered with streamlit.
     - Added package "import subprocess" to run the streamlit app from the python code.
     - Created an env for running the web application.
     - To called existing .py file developed in Phase 1.
    - test and debug minor issues.
  

Solution Code Description (low-level design): 
    * Add a transaction (buy/sell) to the "Transactions" sheet of the excel file.
        - [Investor, ID, Transaction Date, Ticker, Type, Shares, Cost Per Share] fields only, leave "Total" blank.
	* yfinance API to pull current stock data into Transaction sheet of excel file.
    * Calculate the cost basis, realized gains, and current value of each ticker in the excel file.
    * Summary page to display the realized gains, unrealized gains, and cost basis of each ticker.
    * Streamlit to display the data per ticker for each investor.

    * Software packages (Python packages, etc.)
          yfinance, pandas, numpy, datetime, matplotlib.pyplot, plotly, plotly import __version__, plotly.offline, 
          plotly.graph_objs, plotly.graph_objects, plotly.express, streamlit, time, openpyxl, openpyxl.utils.dataframe,
          openpyxl.styles, subprocess
	
Actual Working Product Code: 
    Functions, modules, packages, documentation found in the 
    (master branch) repo @ https://github.com/jonrebelo/Investment_Portfolio_App 
    
    
Application Instructions:

    * Step-by-step instructions for OTHERS:
        Instructions to install, set-up, and use your software:
        # obtain repo from github
            download the code from the repo (master branch) @ https://github.com/jonrebelo/Investment_Portfolio_App  
          
         # create virtual envrionment 
            conda create --name Investment_Portfolio_App -c conda-forge yfinance pandas numpy datetime matplotlib.pyplot plotly streamlit time openpyxl subprocess
          
        ## Activate the environment
            conda activate Investment_Portfolio_App

        ## Install additional packages in the environment for generating diagrams
        plotly import __version__ plotly.offline plotly.graph_objs plotly.graph_objects plotly.express openpyxl openpyxl.utils.dataframe openpyxl.styles
        
        ## Run the code
           - streamlit run frontendv4.py (when running, it will call backend.py).    
           - Add a buy/sell transaction by selecting the "Add Transactions" button.
             - Please ensure:
                - the stock ticker symbol is correct.
                - number of shares is a positive integer.
             note: Transaction total must be left blank (program will calculate this).